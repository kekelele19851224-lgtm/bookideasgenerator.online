'use client'

import { useState } from 'react'
import { BookIdea } from '@/types'
import { ShareButtons } from '@/components/ShareButtons'
import { BookOpen, User, MapPin, Zap, Target, Quote, Tag, Calendar, Save, Heart, Copy, RefreshCw, Star } from 'lucide-react'
import { saveIdeaToStorage } from '@/lib/storage'
import { clsx } from 'clsx'

interface IdeaDisplayProps {
  idea: BookIdea
  onRegenerate?: () => void
}

export function IdeaDisplay({ idea, onRegenerate }: IdeaDisplayProps) {
  const [selectedTitle, setSelectedTitle] = useState(0)
  const [isSaved, setIsSaved] = useState(false)
  const [isCopied, setIsCopied] = useState(false)
  const [isLiked, setIsLiked] = useState(false)

  const handleSaveIdea = () => {
    try {
      saveIdeaToStorage(idea)
      setIsSaved(true)
      setTimeout(() => setIsSaved(false), 2000)
    } catch (error) {
      console.error('Error saving idea:', error)
    }
  }

  const handleCopyIdea = async () => {
    const ideaText = `
📚 BOOK IDEA GENERATED BY BOOKSPARK

📖 Title: ${idea.title[selectedTitle]}
🎭 Genre: ${idea.genre}
🎯 Target Audience: ${idea.targetAudience}

💡 Concept:
${idea.concept}

👤 Main Character: ${idea.mainCharacter}
🏙️ Setting: ${idea.setting}
⚡ Central Conflict: ${idea.conflict}

✨ Opening Line:
"${idea.openingLine}"

🏷️ Key Themes: ${idea.themes.join(', ')}

Generated with BookSpark - https://bookspark.com
    `.trim()

    try {
      await navigator.clipboard.writeText(ideaText)
      setIsCopied(true)
      setTimeout(() => setIsCopied(false), 2000)
    } catch (error) {
      console.error('Error copying to clipboard:', error)
    }
  }

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
    }).format(date)
  }

  return (
    <div className="w-full max-w-4xl mx-auto animate-in slide-in-from-bottom duration-700">
      {/* Header Card */}
      <div className="bg-white rounded-2xl shadow-xl border border-gray-200 mb-6 overflow-hidden">
        <div className="bg-gradient-to-r from-purple-600 to-orange-500 p-6 text-white">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-white/20 rounded-xl flex items-center justify-center backdrop-blur-sm">
                <BookOpen className="w-6 h-6 text-white" />
              </div>
              <div>
                <h2 className="text-2xl md:text-3xl font-bold">Your Book Idea</h2>
                <div className="flex items-center gap-2 text-white/80 text-sm">
                  <Calendar className="w-4 h-4" />
                  <span>Generated {formatDate(idea.generatedAt)}</span>
                </div>
              </div>
            </div>
            
            {/* Action Buttons */}
            <div className="flex gap-2">
              <button
                onClick={() => setIsLiked(!isLiked)}
                className={clsx(
                  'p-3 rounded-xl transition-all duration-200 min-h-touch min-w-touch flex items-center justify-center',
                  isLiked 
                    ? 'bg-red-500 text-white' 
                    : 'bg-white/20 text-white hover:bg-white/30'
                )}
              >
                <Heart className={clsx('w-5 h-5', isLiked && 'fill-current')} />
              </button>
            </div>
          </div>
        </div>

        {/* Action Bar */}
        <div className="p-4 bg-gray-50 border-t border-gray-200">
          <div className="flex flex-wrap gap-3 justify-center">
            <button
              onClick={handleSaveIdea}
              className={clsx(
                'flex items-center gap-2 px-4 py-3 rounded-xl font-medium transition-all duration-200 min-h-touch',
                isSaved 
                  ? 'bg-green-100 text-green-700 border border-green-300' 
                  : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'
              )}
            >
              <Save className="w-4 h-4" />
              {isSaved ? 'Saved!' : 'Save'}
            </button>

            <button
              onClick={handleCopyIdea}
              className={clsx(
                'flex items-center gap-2 px-4 py-3 rounded-xl font-medium transition-all duration-200 min-h-touch',
                isCopied 
                  ? 'bg-blue-100 text-blue-700 border border-blue-300' 
                  : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-200'
              )}
            >
              <Copy className="w-4 h-4" />
              {isCopied ? 'Copied!' : 'Copy'}
            </button>

            {onRegenerate && (
              <button
                onClick={onRegenerate}
                className="flex items-center gap-2 px-4 py-3 bg-purple-600 text-white rounded-xl font-medium hover:bg-purple-700 transition-all duration-200 min-h-touch"
              >
                <RefreshCw className="w-4 h-4" />
                New Idea
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Title Selection */}
      <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 mb-6">
        <h3 className="text-xl font-bold text-gray-900 mb-4 flex items-center gap-2">
          <Star className="w-5 h-5 text-yellow-500" />
          Choose Your Favorite Title
        </h3>
        <div className="space-y-3">
          {idea.title.map((title, index) => (
            <button
              key={index}
              onClick={() => setSelectedTitle(index)}
              className={clsx(
                'w-full p-4 text-left rounded-xl border-2 transition-all duration-200 min-h-touch',
                selectedTitle === index
                  ? 'border-purple-500 bg-purple-50 shadow-sm'
                  : 'border-gray-200 bg-white hover:border-purple-300 hover:bg-purple-25'
              )}
            >
              <div className="flex items-center justify-between">
                <span className="font-semibold text-gray-900 text-lg">{title}</span>
                <div className={clsx(
                  'w-5 h-5 rounded-full border-2 flex items-center justify-center',
                  selectedTitle === index
                    ? 'border-purple-500 bg-purple-500'
                    : 'border-gray-300'
                )}>
                  {selectedTitle === index && (
                    <div className="w-2 h-2 bg-white rounded-full" />
                  )}
                </div>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-6">
        {/* Genre & Audience */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
          <div className="flex items-center gap-2 mb-4">
            <Tag className="w-5 h-5 text-orange-500" />
            <h3 className="text-lg font-semibold text-gray-900">Genre & Audience</h3>
          </div>
          <div className="space-y-3">
            <div className="p-3 bg-orange-50 rounded-lg">
              <span className="text-sm text-orange-600 font-medium">Genre</span>
              <p className="font-semibold text-gray-900">{idea.genre}</p>
            </div>
            <div className="p-3 bg-purple-50 rounded-lg">
              <span className="text-sm text-purple-600 font-medium">Target Audience</span>
              <p className="font-semibold text-gray-900">{idea.targetAudience}</p>
            </div>
          </div>
        </div>

        {/* Main Character */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
          <div className="flex items-center gap-2 mb-4">
            <User className="w-5 h-5 text-blue-500" />
            <h3 className="text-lg font-semibold text-gray-900">Main Character</h3>
          </div>
          <div className="p-4 bg-blue-50 rounded-lg">
            <p className="text-gray-700 leading-relaxed">{idea.mainCharacter}</p>
          </div>
        </div>

        {/* Setting */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
          <div className="flex items-center gap-2 mb-4">
            <MapPin className="w-5 h-5 text-green-500" />
            <h3 className="text-lg font-semibold text-gray-900">Setting</h3>
          </div>
          <div className="p-4 bg-green-50 rounded-lg">
            <p className="text-gray-700 leading-relaxed">{idea.setting}</p>
          </div>
        </div>
      </div>

      {/* Concept & Conflict */}
      <div className="grid gap-6 md:grid-cols-2 mb-6">
        {/* Story Concept */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
          <h3 className="text-xl font-semibold text-gray-900 mb-4">Story Concept</h3>
          <div className="p-4 bg-gray-50 rounded-lg">
            <p className="text-gray-700 leading-relaxed">{idea.concept}</p>
          </div>
        </div>

        {/* Central Conflict */}
        <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
          <div className="flex items-center gap-2 mb-4">
            <Zap className="w-5 h-5 text-red-500" />
            <h3 className="text-xl font-semibold text-gray-900">Central Conflict</h3>
          </div>
          <div className="p-4 bg-red-50 rounded-lg">
            <p className="text-gray-700 leading-relaxed">{idea.conflict}</p>
          </div>
        </div>
      </div>

      {/* Opening Line */}
      <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 mb-6">
        <div className="flex items-center gap-2 mb-4">
          <Quote className="w-5 h-5 text-purple-500" />
          <h3 className="text-xl font-semibold text-gray-900">Opening Line</h3>
        </div>
        <blockquote className="text-lg italic text-gray-700 leading-relaxed bg-gradient-to-r from-purple-50 to-orange-50 p-6 rounded-xl border-l-4 border-purple-500">
          "{idea.openingLine}"
        </blockquote>
      </div>

      {/* Themes */}
      <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 mb-6">
        <h3 className="text-xl font-semibold text-gray-900 mb-4">Key Themes</h3>
        <div className="flex flex-wrap gap-3">
          {idea.themes.map((theme, index) => (
            <span
              key={index}
              className="px-4 py-2 bg-gradient-to-r from-purple-100 to-orange-100 text-purple-700 rounded-full font-medium text-sm"
            >
              {theme}
            </span>
          ))}
        </div>
      </div>

      {/* Share Section */}
      <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
        <h3 className="text-xl font-semibold text-gray-900 mb-4">Share Your Idea</h3>
        <ShareButtons idea={idea} />
      </div>
    </div>
  )
}