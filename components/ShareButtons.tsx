'use client'

import { useState } from 'react'
import { BookIdea } from '@/types'
import { Share2, Copy, Facebook, Twitter, Linkedin, Mail, Check, Download } from 'lucide-react'
import { analytics } from '@/components/Analytics'

interface ShareButtonsProps {
  idea: BookIdea
}

export function ShareButtons({ idea }: ShareButtonsProps) {
  const [isSharing, setIsSharing] = useState(false)
  const [copySuccess, setCopySuccess] = useState(false)

  const shareText = `Check out this amazing book idea: "${idea.title[0]}" - ${idea.concept.slice(0, 100)}...`
  const shareUrl = typeof window !== 'undefined' ? `${window.location.origin}/shared/${idea.id}` : ''

  // Enhanced native sharing with Web Share API
  const handleNativeShare = async () => {
    if (!navigator.share) {
      handleCopyLink()
      return
    }

    setIsSharing(true)
    
    try {
      const shareData = {
        title: `BookSpark: ${idea.title[0]}`,
        text: `Check out this amazing book idea: "${idea.concept.slice(0, 120)}..."`,
        url: shareUrl,
      }

      await navigator.share(shareData)
      analytics.trackSocialShare('native_share', 'book_idea')
    } catch (error) {
      if ((error as Error).name !== 'AbortError') {
        console.error('Error sharing:', error)
        // Fallback to copy link
        handleCopyLink()
      }
    } finally {
      setIsSharing(false)
    }
  }

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(shareUrl)
      setCopySuccess(true)
      setTimeout(() => setCopySuccess(false), 2000)
      analytics.trackSocialShare('copy_link', 'book_idea')
    } catch (error) {
      console.error('Failed to copy link:', error)
      // Fallback for older browsers
      const textArea = document.createElement('textarea')
      textArea.value = shareUrl
      document.body.appendChild(textArea)
      textArea.select()
      document.execCommand('copy')
      document.body.removeChild(textArea)
      setCopySuccess(true)
      setTimeout(() => setCopySuccess(false), 2000)
    }
  }

  const handleSocialShare = (platform: string, url: string) => {
    analytics.trackSocialShare(platform, 'book_idea')
    window.open(url, '_blank', 'width=600,height=400,scrollbars=yes,resizable=yes')
  }

  const handleFacebookShare = () => {
    const url = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareText)}`
    handleSocialShare('facebook', url)
  }

  const handleTwitterShare = () => {
    const text = `${shareText} via @BookSparkApp`
    const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(shareUrl)}&hashtags=BookSpark,WritingInspiration`
    handleSocialShare('twitter', url)
  }

  const handleLinkedInShare = () => {
    const url = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareUrl)}&title=${encodeURIComponent(`Book Idea: ${idea.title[0]}`)}&summary=${encodeURIComponent(shareText)}`
    handleSocialShare('linkedin', url)
  }

  const handleEmailShare = () => {
    const subject = encodeURIComponent(`Book Idea: ${idea.title[0]}`)
    const body = encodeURIComponent(`Hi!

I just generated this amazing book idea using BookSpark and thought you might find it interesting:

Title: ${idea.title[0]}
Genre: ${idea.genre}
Concept: ${idea.concept}

Main Character: ${idea.mainCharacter}
Setting: ${idea.setting}
Central Conflict: ${idea.conflict}

Opening Line: "${idea.openingLine}"

Themes: ${idea.themes.join(', ')}

You can generate your own book ideas at: ${shareUrl}

Happy writing!`)
    window.location.href = `mailto:?subject=${subject}&body=${body}`
    analytics.trackSocialShare('email', 'book_idea')
  }

  const handleDownloadIdea = () => {
    const ideaContent = `
BOOK IDEA GENERATED BY BOOKSPARK

Title: ${idea.title[0]}
Genre: ${idea.genre}
Target Audience: ${idea.targetAudience}

Concept:
${idea.concept}

Main Character: ${idea.mainCharacter}
Setting: ${idea.setting}
Central Conflict: ${idea.conflict}

Opening Line:
"${idea.openingLine}"

Key Themes: ${idea.themes.join(', ')}

Generated on: ${new Date(idea.generatedAt).toLocaleDateString()}

---
Created with BookSpark - https://bookspark.com
    `.trim()

    const blob = new Blob([ideaContent], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `book-idea-${idea.title[0].toLowerCase().replace(/\s+/g, '-')}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    
    analytics.event('download_idea', {
      event_category: 'engagement',
      event_label: idea.genre,
    })
  }

  return (
    <div className="space-y-4">
      {/* Primary share button */}
      <div className="flex flex-col sm:flex-row gap-3">
        {navigator.share ? (
          <button
            onClick={handleNativeShare}
            disabled={isSharing}
            className="flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-orange-500 text-white rounded-xl font-semibold hover:shadow-lg transition-all duration-200 min-h-touch disabled:opacity-50"
          >
            <Share2 className="w-5 h-5" />
            {isSharing ? 'Sharing...' : 'Share Idea'}
          </button>
        ) : (
          <button
            onClick={handleCopyLink}
            className="flex items-center justify-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-orange-500 text-white rounded-xl font-semibold hover:shadow-lg transition-all duration-200 min-h-touch"
          >
            {copySuccess ? <Check className="w-5 h-5" /> : <Copy className="w-5 h-5" />}
            {copySuccess ? 'Copied!' : 'Copy Link'}
          </button>
        )}

        <button
          onClick={handleDownloadIdea}
          className="flex items-center justify-center gap-2 px-6 py-3 bg-gray-700 text-white rounded-xl font-semibold hover:bg-gray-800 transition-all duration-200 min-h-touch"
        >
          <Download className="w-5 h-5" />
          Download
        </button>
      </div>

      {/* Social sharing buttons */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
        <button
          onClick={handleFacebookShare}
          className="flex items-center justify-center gap-2 px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors duration-200 min-h-touch"
        >
          <Facebook className="w-4 h-4" />
          <span className="text-sm font-medium">Facebook</span>
        </button>

        <button
          onClick={handleTwitterShare}
          className="flex items-center justify-center gap-2 px-4 py-3 bg-black hover:bg-gray-800 text-white rounded-lg transition-colors duration-200 min-h-touch"
        >
          <Twitter className="w-4 h-4" />
          <span className="text-sm font-medium">Twitter</span>
        </button>

        <button
          onClick={handleLinkedInShare}
          className="flex items-center justify-center gap-2 px-4 py-3 bg-blue-700 hover:bg-blue-800 text-white rounded-lg transition-colors duration-200 min-h-touch"
        >
          <Linkedin className="w-4 h-4" />
          <span className="text-sm font-medium">LinkedIn</span>
        </button>

        <button
          onClick={handleEmailShare}
          className="flex items-center justify-center gap-2 px-4 py-3 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors duration-200 min-h-touch"
        >
          <Mail className="w-4 h-4" />
          <span className="text-sm font-medium">Email</span>
        </button>
      </div>

      {/* Copy success feedback */}
      {copySuccess && (
        <div className="text-center text-sm text-green-600 font-medium">
          âœ“ Link copied to clipboard!
        </div>
      )}
    </div>
  )
}